#!/bin/bash

# Create dockeruser homedir
mkdir -p /home/dockeruser

# Create symlinks for files/dirs under /config

# if /config/youtube-dl.conf exists, symlink to /etc/youtube-dl.conf
if [[ -e "/config/youtube-dl.conf" ]]; then
    # if the symlink already exists, remove it
    if [[ -L "/etc/youtube-dl.conf" ]]; then
        rm -v "/etc/youtube-dl.conf"
    fi
    # create symlink
    ln -vs "/config/youtube-dl.conf" "/etc/youtube-dl.conf" > /dev/null 2>&1 || true
fi

# if /config/.netrc exists, symlink to /home/dockeruser/.netrc
if [[ -e "/config/.netrc" ]]; then
    # if the symlink already exists, remove it
    if [[ -L "/home/dockeruser/.netrc" ]]; then
        rm -v "/home/dockeruser/.netrc"
    fi
    # create symlink
    ln -vs "/config/.netrc" "/home/dockeruser/.netrc" > /dev/null 2>&1 || true
fi

# if /config/.cache exists, symlink to /home/dockeruser/.cache
if [[ -d "/config/.cache" ]]; then
    # if the symlink already exists, remove it
    if [[ -L "/home/dockeruser/.cache/youtube-dl" && -d "/home/dockeruser/.cache/youtube-dl" ]]; then
        rm -v "/home/dockeruser/.cache/youtube-dl"
    fi
    # create symlink
    mkdir -p "/home/dockeruser/.cache"
    ln -vs /config/.cache "/home/dockeruser/.cache/youtube-dl"
fi

# if user has requested UPDATE_YOUTUBE_DL, then update youtube-dl
if [[ -n "$UPDATE_YOUTUBE_DL" ]]; then
    youtube-dl -U
fi

# Set UID/PID of user that youtube-dl will be run as
YOUTUBEDLPGID=${PGID:-1000}
YOUTUBEDLPUID=${PUID:-1000}

# Check to see if group/user already exist, if so, delete
EXISTINGGROUPNAME=$(getent group "$YOUTUBEDLPGID" | cut -d ':' -f 1)
EXISTINGUSERNAME=$(getent passwd "$YOUTUBEDLPUID" | cut -d ':' -f 1)
if [[ -n "$EXISTINGGROUPNAME" ]]; then
    groupdel -f "$EXISTINGGROUPNAME"
fi
if [[ -n "$EXISTINGUSERNAME" ]]; then
    userdel -f "$EXISTINGUSERNAME"
fi

# Create user/group
addgroup --quiet --gid "$YOUTUBEDLPGID" dockeruser
chown -R "$YOUTUBEDLPUID":"$YOUTUBEDLPGID" /home/dockeruser
adduser --quiet --system --disabled-password --uid "$YOUTUBEDLPUID" --gid "$YOUTUBEDLPGID" --home /home/dockeruser dockeruser
chown -R "$YOUTUBEDLPUID":"$YOUTUBEDLPGID" /usr/local/bin/youtube-dl
chmod u+s /usr/local/bin/youtube-dl
HOME=/home/dockeruser
export HOME

# Set UMASK if required
if [[ -n "$UMASK" ]]; then
    umask "$UMASK"
fi


# Run youtube-dlc with remainder of command line arguments

export TMPDIR=$(mktemp -d --tmpdir=/workdir)
cd $TMPDIR

setpriv --reuid dockeruser --regid dockeruser --keep-groups python3 /usr/local/bin/youtube-dl --restrict-filenames -f bestvideo[ext=mp4] "$YOUTUBE_URL"
echo "List downloaded videos"

for videofile in ./*; do
    extension="${videofile##*.}"
    filename="${videofile%.*}"
    basename=`basename "$videofile"`
    echo "videofile $videofile extension is $extension"
    if [ "$extension" != "mp4" ]
    then
        echo "converting $basename to mp4"
        ffmpeg -y -i "$basename" "$filename.mp4"
        echo "deleting previous file"
        rm "$basename"
    fi
done

echo "checking azure env variables"

# if [[ -n $CLIENT_ID && -n $CLIENT_SECRET && -n $STORAGE_ACCOUNT && -n $CONTAINER && -n $AZURE_TENANT ]];
#Moving to User Assigned Managed Identity
if [[ -n $STORAGE_ACCOUNT && -n $STORAGE_CONTAINER ]];
then
    echo "Azure login"
    #Make sure the user has Storage Blob Data Contributor access"
    # az login --service-principal -u $CLIENT_ID -p $CLIENT_SECRET --tenant $AZURE_TENANT
     az login --identity
    # export AZCOPY_SPA_CLIENT_SECRET=$CLIENT_SECRET
    # azcopy login --service-principal --application-id $CLIENT_ID
    echo "uploading videos to blob storage"
    for videofile in ./*; do
        basename=`basename "$videofile"`
        echo "uploading to blob"
        az storage blob upload -f $videofile --account-name $STORAGE_ACCOUNT -c $STORAGE_CONTAINER -n $basename --auth-mode login
        rm -f $videofile
        #echo "azcopy for $basename"
        #azcopy copy $videofile  "https://$STORAGE_ACCOUNT.blob.core.windows.net/$CONTAINER/$basename"
    done
    cd /workdir
    rm -rf $TMPDIR
else
    echo "Missing environment variable"
fi

if [[ -n $CALLBACK_URL ]];
then
    echo "callback url $CALLBACK_URL"
    curl -X POST $CALLBACK_URL -H 'Content-Type: application/json' -d '{}'
fi